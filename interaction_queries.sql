-- Create USERS table
CREATE TABLE USERS (
    USER_ID INT AUTOINCREMENT PRIMARY KEY,
    NAME VARCHAR(100),
    EMAIL VARCHAR(100) UNIQUE,
    PASSWORD VARCHAR(255)
);

-- Create DESTINATION table
CREATE TABLE DESTINATION (
    DESTINATION_ID INT AUTOINCREMENT PRIMARY KEY,
    CITY VARCHAR(100),
    MEAL_COST FLOAT,
    ACCOMODATION_COST FLOAT,
    TRANSPORT_COST FLOAT
);

-- Create COST_PREDICTIONS table
CREATE TABLE COST_PREDICTIONS (
    PREDICTION_ID INT AUTOINCREMENT PRIMARY KEY,
    USER_ID INT,
    DESTINATION_ID INT,
    MEAL_COST FLOAT,
    ACCOMODATION_COST FLOAT,
    TRANSPORT_COST FLOAT,
    TOTAL_COST FLOAT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Fetch user by email for login
SELECT USER_ID, NAME, PASSWORD 
FROM USERS 
WHERE EMAIL = %s;

-- Check if email already exists for registration
SELECT 1 
FROM USERS 
WHERE EMAIL = %s;

-- Register a new user
INSERT INTO USERS (NAME, EMAIL, PASSWORD) 
VALUES (%s, %s, %s);

-- Get destination cost details
SELECT CITY, MEAL_COST, ACCOMODATION_COST, TRANSPORT_COST 
FROM DESTINATION;

-- Get DESTINATION_ID based on city
SELECT DESTINATION_ID 
FROM DESTINATION 
WHERE CITY = %s;

-- Log cost prediction
INSERT INTO COST_PREDICTIONS (
    USER_ID, DESTINATION_ID, MEAL_COST, ACCOMODATION_COST, TRANSPORT_COST, TOTAL_COST
) VALUES (%s, %s, %s, %s, %s, %s);

-- Fetch trip summaries for logged-in user
SELECT 
    cp.PREDICTION_ID,
    d.CITY AS DESTINATION,
    cp.MEAL_COST,
    cp.ACCOMODATION_COST,
    cp.TRANSPORT_COST,
    cp.TOTAL_COST,
    cp.CREATED_AT
FROM COST_PREDICTIONS cp
JOIN DESTINATION d ON cp.DESTINATION_ID = d.DESTINATION_ID
WHERE cp.USER_ID = %s
ORDER BY cp.PREDICTION_ID DESC;
